{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nconst config = {\n  apiKey: \"AIzaSyApQKfIc_UfPADj7-LmPNInOsPy34UAiN8\",\n  authDomain: \"crwn-db-62b0b.firebaseapp.com\",\n  projectId: \"crwn-db-62b0b\",\n  storageBucket: \"crwn-db-62b0b.appspot.com\",\n  messagingSenderId: \"476049351484\",\n  appId: \"1:476049351484:web:52626976c0792d8f80b439\",\n  measurementId: \"G-JZL4XLD108\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["D:/Udemy/ReactJS/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyApQKfIc_UfPADj7-LmPNInOsPy34UAiN8\",\r\n    authDomain: \"crwn-db-62b0b.firebaseapp.com\",\r\n    projectId: \"crwn-db-62b0b\",\r\n    storageBucket: \"crwn-db-62b0b.appspot.com\",\r\n    messagingSenderId: \"476049351484\",\r\n    appId: \"1:476049351484:web:52626976c0792d8f80b439\",\r\n    measurementId: \"G-JZL4XLD108\"\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider()\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider)\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n\r\n    const snapShot = await userRef.get()\r\n\r\n    if (!snapShot.exists) {\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date()\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n\r\n    }\r\n    return userRef\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey)\r\n\r\n    const batch = firestore.batch()\r\n\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc()\r\n        batch.set(newDocRef, obj)\r\n    })\r\n\r\n    return await batch.commit()\r\n}\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const { title, items } = doc.data()\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        }\r\n    })\r\n\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection\r\n        return accumulator\r\n    }, {})\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe()\r\n            resolve(userAuth)\r\n        }, reject)\r\n    })\r\n}\r\n\r\nexport default firebase"]},"metadata":{},"sourceType":"module"}